// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  type        String?
  price       Float
  image       String?
  stock       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

    // Relaciones
  saleItems SaleItem[]
}

//
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  role      String   // "admin", "bartender", etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  sales     Sale[]
  
  @@map("users")
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  sales     Sale[]
  
  @@map("customers")
}

model Sale {
  id            Int      @id @default(autoincrement())
  total         Float
  paymentAmount Float
  change        Float
  paymentMethod String   @default("Cash") // "Cash", "Credit Card", etc.
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Foreign Keys
  userId     Int
  customerId Int?
  
  // Relaciones
  user       User        @relation(fields: [userId], references: [id])
  customer   Customer?   @relation(fields: [customerId], references: [id])
  items      SaleItem[]
  
  @@map("sales")
}

model SaleItem {
  id       Int   @id @default(autoincrement())
  quantity Int
  price    Float // Precio al momento de la venta
  
  // Foreign Keys
  saleId    Int
  productId Int
  
  // Relaciones
  sale    Sale    @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  
  @@map("sale_items")
}

model Company {
  id              String   @id @default(cuid())
  name            String
  registrationNumber String @map("registration_number")
  email           String   @unique
  phone           String?
  currency        String   @default("USD")
  timezone        String   @default("America/Bogota")
  logo            String?
  
  // Address fields
  street          String
  city            String
  state           String   @map("region_province")
  postalCode      String   @map("postal_code")
  country         String
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  @@map("companies")
}